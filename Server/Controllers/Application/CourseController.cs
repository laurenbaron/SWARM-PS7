using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using SWARM.EF.Data;
using SWARM.EF.Models;
using System;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using SWARM.Server.Controllers.Base;

namespace SWARM.Server.Controllers.Application
{
    [Route("api/[controller]")]
    [ApiController]
    public class CourseController : BaseController<Course>, iBaseController<Course>
    {
        public CourseController(SWARMOracleContext context,
            IHttpContextAccessor httpContextAccessor)
            :base(context, httpContextAccessor)
        {
        }

        [HttpGet]
        [Route("Get")]
        public async Task<IActionResult> Get()
        {
            //made variable names more general so don't need to change for each class 
            List<Course> lst_t = await _context.Courses.OrderBy(x => x.CourseNo).ToListAsync();
            return Ok(lst_t);
        }

        [HttpGet]
        [Route("Get/{t_no}")]
        public async Task<IActionResult> Get(int t_no)
        {
            Course itm_t = await _context.Courses.Where(x => x.CourseNo == t_no).FirstOrDefaultAsync();
            return Ok(itm_t);
        }

        [HttpDelete]
        [Route("Delete/{t_no}")]
        public async Task<IActionResult> Delete(int t_no)
        {
            Course itm_t = await _context.Courses.Where(x => x.CourseNo == t_no).FirstOrDefaultAsync();
            _context.Remove(itm_t);
            await _context.SaveChangesAsync();
            return Ok();
        }

        [HttpPut]
        public async Task<IActionResult> Put([FromBody] Course t_dto)
        {
            bool bExist = false;
            var trans = _context.Database.BeginTransaction();
            try
            {
                var exist_t = await _context.Courses.Where(x => x.CourseNo == t_dto.CourseNo).FirstOrDefaultAsync();

                if (exist_t == null)
                {
                    bExist = false;
                    exist_t = new Course();
                } else
                {
                    bExist = true;
                }

                //don't include PK because it is generated by the trigger/sequence number
                exist_t.Cost = t_dto.Cost;
                exist_t.Description = t_dto.Description;
                exist_t.Prerequisite = t_dto.Prerequisite;
                exist_t.PrerequisiteSchoolId = t_dto.PrerequisiteSchoolId;
                exist_t.SchoolId = t_dto.SchoolId;
                if (bExist)
                {
                    _context.Update(exist_t);
                } else
                {
                    _context.Add(exist_t);
                }
                await _context.SaveChangesAsync();
                trans.Commit();

                return Ok(t_dto.CourseNo);
            }
            catch (Exception ex)
            {
                trans.Rollback();
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }

        [HttpPost]
        public async Task<IActionResult> Post([FromBody] Course t_dto)
        {
            var trans = _context.Database.BeginTransaction();
            try
            {
                var exist_t = await _context.Courses.Where(x => x.CourseNo == t_dto.CourseNo).FirstOrDefaultAsync();

                if (exist_t != null)
                {
                    return StatusCode(StatusCodes.Status500InternalServerError, "Record exists, cannot insert");
                }
                exist_t = new Course();
                exist_t.Cost = t_dto.Cost;
                exist_t.Description = t_dto.Description;
                exist_t.Prerequisite = t_dto.Prerequisite;
                exist_t.PrerequisiteSchoolId = t_dto.PrerequisiteSchoolId;
                exist_t.SchoolId = t_dto.SchoolId;
                _context.Add(exist_t);
                
                await _context.SaveChangesAsync();
                trans.Commit();

                return Ok(t_dto.CourseNo);
            }
            catch (Exception ex)
            {
                trans.Rollback();
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }

        /*
                [HttpPost]
                [Route("GetCourses")]
                public async Task<DataEnvelope<CourseDTO>> GetCoursesPost([FromBody] DataSourceRequest gridRequest)
                {
                    DataEnvelope<CourseDTO> dataToReturn = null;
                    IQueryable<CourseDTO> queriableStates = _context.Courses
                            .Select(sp => new CourseDTO
                            {
                                Cost = sp.Cost,
                                CourseNo = sp.CourseNo,
                                CreatedBy = sp.CreatedBy,
                                CreatedDate = sp.CreatedDate,
                                Description = sp.Description,
                                ModifiedBy = sp.ModifiedBy,
                                ModifiedDate = sp.ModifiedDate,
                                Prerequisite = sp.Prerequisite,
                                PrerequisiteSchoolId = sp.PrerequisiteSchoolId,
                                SchoolId = sp.SchoolId
                            });

                    // use the Telerik DataSource Extensions to perform the query on the data
                    // the Telerik extension methods can also work on "regular" collections like List<T> and IQueriable<T>
                    try
                    {

                        DataSourceResult processedData = await queriableStates.ToDataSourceResultAsync(gridRequest);

                        if (gridRequest.Groups.Count > 0)
                        {
                            // If there is grouping, use the field for grouped data
                            // The app must be able to serialize and deserialize it
                            // Example helper methods for this are available in this project
                            // See the GroupDataHelper.DeserializeGroups and JsonExtensions.Deserialize methods
                            dataToReturn = new DataEnvelope<CourseDTO>
                            {
                                GroupedData = processedData.Data.Cast<AggregateFunctionsGroup>().ToList(),
                                TotalItemCount = processedData.Total
                            };
                        }
                        else
                        {
                            // When there is no grouping, the simplistic approach of 
                            // just serializing and deserializing the flat data is enough
                            dataToReturn = new DataEnvelope<CourseDTO>
                            {
                                CurrentPageData = processedData.Data.Cast<CourseDTO>().ToList(),
                                TotalItemCount = processedData.Total
                            };
                        }
                    }
                    catch (Exception e)
                    {
                        //fixme add decent exception handling
                    }
                    return dataToReturn;
                }
        */
    }
}
